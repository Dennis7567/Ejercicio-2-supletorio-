#include <iostream>
using namespace std;

int main() {
    int N;
    cout << "Ingrese el tamaño de la matriz cuadrada (N): ";
    cin >> N;

    // Crear la matriz dinámica
    int** matriz = new int*[N];
    for (int i = 0; i < N; i++) {
        matriz[i] = new int[N];
    }

    // Llenar la matriz
    cout << "Ingrese los elementos de la matriz (" << N << "x" << N << "):\n";
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            cin >> matriz[i][j];
        }
    }

    int opcion;
    do {
        // Menú de opciones
        cout << "\nMenú de operaciones:\n";
        cout << "1. Sumar todos los elementos de la matriz.\n";
        cout << "2. Reemplazar diagonal principal por un número.\n";
        cout << "3. Buscar un número en la matriz.\n";
        cout << "4. Generar nueva matriz con valores 1 (par) y 0 (impar).\n";
        cout << "0. Salir.\n";
        cout << "Ingrese una opción: ";
        cin >> opcion;

        switch (opcion) {
            case 1: {
                // Sumar todos los elementos de la matriz
                int sumaTotal = 0;
                for (int i = 0; i < N; i++) {
                    for (int j = 0; j < N; j++) {
                        sumaTotal += matriz[i][j];
                    }
                }
                cout << "La suma total de todos los elementos es: " << sumaTotal << endl;
                break;
            }

            case 2: {
                // Reemplazar diagonal principal
                int numDiagonal;
                cout << "Ingrese el número para reemplazar la diagonal principal: ";
                cin >> numDiagonal;
                for (int i = 0; i < N; i++) {
                    matriz[i][i] = numDiagonal;
                }

                // Mostrar la nueva matriz
                cout << "Matriz con diagonal reemplazada:\n";
                for (int i = 0; i < N; i++) {
                    for (int j = 0; j < N; j++) {
                        cout << matriz[i][j] << " ";
                    }
                    cout << endl;
                }
                break;
            }

            case 3: {
                // Buscar un número en la matriz
                int numeroBuscar;
                cout << "Ingrese el número a buscar: ";
                cin >> numeroBuscar;
                bool encontrado = false;
                for (int i = 0; i < N; i++) {
                    for (int j = 0; j < N; j++) {
                        if (matriz[i][j] == numeroBuscar) {
                            cout << "El número se encuentra en la posición [" << i << "][" << j << "].\n";
                            encontrado = true;
                            break;
                        }
                    }
                    if (encontrado) break;
                }
                if (!encontrado) {
                    cout << "El número no se encuentra en la matriz.\n";
                }
                break;
            }

            case 4: {
                // Generar nueva matriz con valores 1 (par) y 0 (impar)
                int** nuevaMatriz = new int*[N];
                for (int i = 0; i < N; i++) {
                    nuevaMatriz[i] = new int[N];
                }

                for (int i = 0; i < N; i++) {
                    for (int j = 0; j < N; j++) {
                        if (matriz[i][j] % 2 == 0) {
                            nuevaMatriz[i][j] = 1; // Par
                        } else {
                            nuevaMatriz[i][j] = 0; // Impar
                        }
                    }
                }

                // Mostrar la nueva matriz
                cout << "Nueva matriz con 1 (par) y 0 (impar):\n";
                for (int i = 0; i < N; i++) {
                    for (int j = 0; j < N; j++) {
                        cout << nuevaMatriz[i][j] << " ";
                    }
                    cout << endl;
                }

                // Liberar memoria de la nueva matriz
                for (int i = 0; i < N; i++) {
                    delete[] nuevaMatriz[i];
                }
                delete[] nuevaMatriz;
                break;
            }

            case 0:
                cout << "Saliendo del programa.\n";
                break;

            default:
                cout << "Opción no válida. Intente de nuevo.\n";
                break;
        }
    } while (opcion != 0);

    // Liberar memoria de la matriz original
    for (int i = 0; i < N; i++) {
        delete[] matriz[i];
    }
    delete[] matriz;

    return 0;
}
